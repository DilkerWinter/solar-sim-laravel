name: Deploy to Production on VPS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      - name: Add VPS host to known_hosts
        run: ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Sync files to VPS
        run: |
          APP_BASE_DIR="$(echo '${{ secrets.VPS_PATH }}' | tr -d '\n' | xargs)"
          rsync -avz --delete --no-times --no-perms --no-owner\
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='vendor' \
            --exclude='.env' \
            ./ ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:"$APP_BASE_DIR"

      - name: Check PHP version on VPS
        run: ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "php -v"
      

      - name: Create SQLite database if not exists on VPS
        run: |
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << EOF
            mkdir -p "${{ secrets.VPS_PATH }}/database"
            if [ ! -f "${{ secrets.VPS_PATH }}/database/database.sqlite" ]; then
              touch "${{ secrets.VPS_PATH }}/database/database.sqlite"
            fi
          EOF

      - name: Setup .env on VPS
        run: |
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            APP_BASE_DIR="${{ secrets.VPS_PATH }}"
            DB_PATH="$APP_BASE_DIR/database/database.sqlite"

            printf "APP_NAME=solarsim\n" > "$APP_BASE_DIR/.env"
            printf "APP_ENV=production\n" >> "$APP_BASE_DIR/.env"
            printf "APP_KEY=\n" >> "$APP_BASE_DIR/.env"
            printf "APP_DEBUG=false\n" >> "$APP_BASE_DIR/.env"
            printf "APP_URL=https://solarsim.app.br\n" >> "$APP_BASE_DIR/.env"
            printf "DB_CONNECTION=sqlite\n" >> "$APP_BASE_DIR/.env"
            printf "DB_DATABASE=$DB_PATH\n" >> "$APP_BASE_DIR/.env"

            cd "$APP_BASE_DIR" || exit 1
            php artisan key:generate --force
            echo ".env file setup complete and app key generated."
          EOF

      - name: Install dependencies and run Laravel commands
        run: |
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            APP_BASE_DIR="${{ secrets.VPS_PATH }}"

            cd "$APP_BASE_DIR" || exit 1
            composer install --no-dev --optimize-autoloader
            php artisan migrate --force
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache
            echo "Laravel setup completed."
          EOF

      - name: Install npm dependencies and build React front-end
        run: |
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            APP_BASE_DIR="${{ secrets.VPS_PATH }}"
            cd "$APP_BASE_DIR" || exit 1

            if [ -f package.json ]; then
              if [ -d node_modules ]; then
                echo "Removing existing node_modules..."
                rm -rf node_modules
              fi

              echo "Installing front-end dependencies..."
              npm ci --no-audit --progress=false

              echo "Running Vite build..."
              npm run build

              echo "Front-end assets successfully built."
            else
              echo "No package.json found. Skipping front-end build."
            fi
          EOF